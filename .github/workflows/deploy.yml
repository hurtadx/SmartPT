name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validación completa antes del deploy
  pre-deploy-validation:
    runs-on: ubuntu-latest
    name: Pre-Deploy Validation
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: smartpt_prod_test
          POSTGRES_USER: smartpt
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Tests
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_pgsql

      - name: Install Backend Dependencies
        working-directory: ./SmartBackend
        run: composer install --no-dev --optimize-autoloader

      - name: Backend Production Test
        working-directory: ./SmartBackend
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan test
        env:
          APP_ENV: production
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: smartpt_prod_test
          DB_USERNAME: smartpt
          DB_PASSWORD: secret

      # Frontend Tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./SmartFrontend/package-lock.json

      - name: Install Frontend Dependencies
        working-directory: ./SmartFrontend
        run: npm ci

      - name: Frontend Production Build
        working-directory: ./SmartFrontend
        run: |
          npm run lint
          npm run build
        env:
          NODE_ENV: production

  # Build Docker Images
  build-images:
    needs: pre-deploy-validation
    runs-on: ubuntu-latest
    name: Build Docker Images
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Image
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./SmartBackend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Frontend Image  
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./SmartFrontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy a staging (simulado)
  deploy-staging:
    needs: build-images
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Backend Image: ${{ needs.build-images.outputs.backend-image }}"
          echo "Frontend Image: ${{ needs.build-images.outputs.frontend-image }}"
          
       

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests on staging..."
         
  # Deploy a producción
  deploy-production:
    needs: [build-images, deploy-staging]
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          echo "Backend Image: ${{ needs.build-images.outputs.backend-image }}"
          echo "Frontend Image: ${{ needs.build-images.outputs.frontend-image }}"
          
          # Aquí iría la lógica real de deploy a producción
          echo " Production deployment completed"

      - name: Post-deployment verification
        run: |
          echo " Verifying production deployment..."
          # Health checks, smoke tests, etc.
          echo " Production verification passed"

  # Notificación de deploy exitoso
  notify-success:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    name: Notify Deployment Success
    if: success()

    steps:
      - name: Create deployment summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** SmartPT Survey Platform" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##  Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Database: Migrations applied" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Developed by André Hurtado - SmartPT © 2025**" >> $GITHUB_STEP_SUMMARY
